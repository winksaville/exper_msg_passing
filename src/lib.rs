use std::fmt::Display;

pub trait PushV {
    fn push_v(&mut self, val: u8);
}

#[derive(Clone, Default)]
pub struct MsgOf {
    pub v: Vec<u8>,
}

impl Display for MsgOf {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:p} {:p}", &self, &self.v[0])
    }
}

impl PushV for MsgOf {
    fn push_v(&mut self, val: u8) {
        self.v.push(val);
    }
}

// Message with many fields
#[derive(Clone)]
pub struct MsgMf {
    pub v: Vec<u8>,
    pub f0u128: u128,
    pub f0u64: u64,
    pub f0u32: u32,
    pub f0u16: u16,
    pub f0u8: u8,
    pub f0i128: i128,
    pub f0i64: i64,
    pub f0i32: i32,
    pub f0i16: i16,
    pub f0i8: i8,
    pub f1u128: u128,
    pub f1u64: u64,
    pub f1u32: u32,
    pub f1u16: u16,
    pub f1u8: u8,
    pub f1i128: i128,
    pub f1i64: i64,
    pub f1i32: i32,
    pub f1i16: i16,
    pub f1i8: i8,
    pub f2u128: u128,
    pub f2u64: u64,
    pub f2u32: u32,
    pub f2u16: u16,
    pub f2u8: u8,
    pub f2i128: i128,
    pub f2i64: i64,
    pub f2i32: i32,
    pub f2i16: i16,
    pub f2i8: i8,
    pub f3u128: u128,
    pub f3u64: u64,
    pub f3u32: u32,
    pub f3u16: u16,
    pub f3u8: u8,
    pub f3i128: i128,
    pub f3i64: i64,
    pub f3i32: i32,
    pub f3i16: i16,
    pub f3i8: i8,
    pub f4u128: u128,
    pub f4u64: u64,
    pub f4u32: u32,
    pub f4u16: u16,
    pub f4u8: u8,
    pub f4i128: i128,
    pub f4i64: i64,
    pub f4i32: i32,
    pub f4i16: i16,
    pub f4i8: i8,
    pub f5u128: u128,
    pub f5u64: u64,
    pub f5u32: u32,
    pub f5u16: u16,
    pub f5u8: u8,
    pub f5i128: i128,
    pub f5i64: i64,
    pub f5i32: i32,
    pub f5i16: i16,
    pub f5i8: i8,
    pub f6u128: u128,
    pub f6u64: u64,
    pub f6u32: u32,
    pub f6u16: u16,
    pub f6u8: u8,
    pub f6i128: i128,
    pub f6i64: i64,
    pub f6i32: i32,
    pub f6i16: i16,
    pub f6i8: i8,
    pub f7u128: u128,
    pub f7u64: u64,
    pub f7u32: u32,
    pub f7u16: u16,
    pub f7u8: u8,
    pub f7i128: i128,
    pub f7i64: i64,
    pub f7i32: i32,
    pub f7i16: i16,
    pub f7i8: i8,
    pub f8u128: u128,
    pub f8u64: u64,
    pub f8u32: u32,
    pub f8u16: u16,
    pub f8u8: u8,
    pub f8i128: i128,
    pub f8i64: i64,
    pub f8i32: i32,
    pub f8i16: i16,
    pub f8i8: i8,
    pub f9u128: u128,
    pub f9u64: u64,
    pub f9u32: u32,
    pub f9u16: u16,
    pub f9u8: u8,
    pub f9i128: i128,
    pub f9i64: i64,
    pub f9i32: i32,
    pub f9i16: i16,
    pub f9i8: i8,
}

impl Display for MsgMf {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:p} {:p}", &self, &self.v[0])
    }
}

impl PushV for MsgMf {
    fn push_v(&mut self, val: u8) {
        self.v.push(val);
    }
}

impl Default for MsgMf {
    #[inline(never)]
    fn default() -> Self {
        Self {
            v: vec![],
            f0u128: 128,
            f0u64: 64,
            f0u32: 32,
            f0u16: 16,
            f0u8: 8,
            f0i128: 128,
            f0i64: 64,
            f0i32: 32,
            f0i16: 16,
            f0i8: 8,
            f1u128: 128,
            f1u64: 64,
            f1u32: 32,
            f1u16: 16,
            f1u8: 8,
            f1i128: 128,
            f1i64: 64,
            f1i32: 32,
            f1i16: 16,
            f1i8: 8,
            f2u128: 128,
            f2u64: 64,
            f2u32: 32,
            f2u16: 16,
            f2u8: 8,
            f2i128: 128,
            f2i64: 64,
            f2i32: 32,
            f2i16: 16,
            f2i8: 8,
            f3u128: 128,
            f3u64: 64,
            f3u32: 32,
            f3u16: 16,
            f3u8: 8,
            f3i128: 128,
            f3i64: 64,
            f3i32: 32,
            f3i16: 16,
            f3i8: 8,
            f4u128: 128,
            f4u64: 64,
            f4u32: 32,
            f4u16: 16,
            f4u8: 8,
            f4i128: 128,
            f4i64: 64,
            f4i32: 32,
            f4i16: 16,
            f4i8: 8,
            f5u128: 128,
            f5u64: 64,
            f5u32: 32,
            f5u16: 16,
            f5u8: 8,
            f5i128: 128,
            f5i64: 64,
            f5i32: 32,
            f5i16: 16,
            f5i8: 8,
            f6u128: 128,
            f6u64: 64,
            f6u32: 32,
            f6u16: 16,
            f6u8: 8,
            f6i128: 128,
            f6i64: 64,
            f6i32: 32,
            f6i16: 16,
            f6i8: 8,
            f7u128: 128,
            f7u64: 64,
            f7u32: 32,
            f7u16: 16,
            f7u8: 8,
            f7i128: 128,
            f7i64: 64,
            f7i32: 32,
            f7i16: 16,
            f7i8: 8,
            f8u128: 128,
            f8u64: 64,
            f8u32: 32,
            f8u16: 16,
            f8u8: 8,
            f8i128: 128,
            f8i64: 64,
            f8i32: 32,
            f8i16: 16,
            f8i8: 8,
            f9u128: 128,
            f9u64: 64,
            f9u32: 32,
            f9u16: 16,
            f9u8: 8,
            f9i128: 128,
            f9i64: 64,
            f9i32: 32,
            f9i16: 16,
            f9i8: 8,
        }
    }
}
